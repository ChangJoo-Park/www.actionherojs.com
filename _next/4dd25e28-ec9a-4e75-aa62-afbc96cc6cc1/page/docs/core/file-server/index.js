
          window.__NEXT_REGISTER_PAGE('/docs/core/file-server', function() {
            var comp = module.exports=webpackJsonp([29],{1213:function(e,t,n){e.exports=n(1214)},1214:function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var l=n(9),a=i(l),r=n(1),o=i(r),c=n(8),s=i(c),u=n(2),m=i(u),f=n(3),d=i(f),N="/home/ubuntu/www.actionherojs.com/pages/docs/core/file-server.js?entry",_=n(0),h=i(_),b=n(16),p=i(b),E=n(11),g=n(14),w=i(g),y=n(18),v=i(y),C=function(e){function t(e){(0,o.default)(this,t);var n=(0,m.default)(this,(t.__proto__||(0,a.default)(t)).call(this,e));return n.state={titleSection:{title:"Core: File Server",icon:"/static/images/file-server.svg"},sections:{overview:"Overview","web-clients":"Web Clients","non-web-clients":"Non-Web clients","files-from-actions":"Files from Actions",customizing:"Customizing the File Server"},links:[{link:"/docs/core/logging",title:"» Core: Logging"},{link:"/docs/core/chat",title:"« Core: Chat"}]},n}return(0,d.default)(t,e),(0,s.default)(t,[{key:"render",value:function(){return h.default.createElement(w.default,{sideNav:this.state.sections,titleSection:this.state.titleSection,links:this.state.links,currentSection:this.state.currentSection,__source:{fileName:N,lineNumber:88}},h.default.createElement(E.Row,{__source:{fileName:N,lineNumber:89}},h.default.createElement(E.Col,{md:12,__source:{fileName:N,lineNumber:90}},this.section("overview",h.default.createElement("div",{__source:{fileName:N,lineNumber:92}},h.default.createElement(v.default,{language:"bash",__source:{fileName:N,lineNumber:93}},"> curl localhost:8080/simple.html -v\n\n*   Trying ::1...\n* connect to ::1 port 8080 failed: Connection refused\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n> GET /simple.html HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.43.0\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n< Last-Modified: Fri Jun 12 2015 02:51:29 GMT-0700 (PDT)\n< Cache-Control: max-age=60, must-revalidate, public\n< Expires: Sun, 15 Nov 2015 02:07:46 GMT\n< Content-Type: text/html\n< Access-Control-Allow-Headers: Content-Type\n< Access-Control-Allow-Methods: HEAD, GET, POST, PUT, PATCH, DELETE, OPTIONS, TRACE\n< Access-Control-Allow-Origin: *\n< X-Powered-By: actionhero API\n< Set-Cookie: sessionID=d4453f54ff066a2ef078e5c80f18dc78a81f44ff;path=/;expires=Sun, 15 Nov 2015 03:06:46 GMT;\n< Content-Length: 101\n< Date: Sun, 15 Nov 2015 02:06:46 GMT\n< Connection: keep-alive\n<\n* Connection #0 to host localhost left intact\n\n<h1>ActionHero</h1>\nI am a flat file being served to you via the API from ./public/simple.html<br />\n"),h.default.createElement("p",{__source:{fileName:N,lineNumber:94}},"ActionHero comes with a file server which clients can make use of to request files on the ActionHero server.  ActionHero is not meant to be a 'rendering' server (like express or rails), but can serve static files."),h.default.createElement("p",{__source:{fileName:N,lineNumber:95}},"If a directory is requested rather than a file, ActionHero will look for the file in that directory defined by ",h.default.createElement("code",{__source:{fileName:N,lineNumber:95}},"api.config.commonWeb.directoryFileType")," (which defaults to ",h.default.createElement("code",{__source:{fileName:N,lineNumber:95}},"index.html"),").  Failing to find this file, an error will be returned defined in ",h.default.createElement("code",{__source:{fileName:N,lineNumber:95}},"api.config.general.flatFileIndexPageNotFoundMessage")),h.default.createElement("p",{__source:{fileName:N,lineNumber:96}},"You can use the ",h.default.createElement("code",{__source:{fileName:N,lineNumber:96}},"api.staticFile.get(connection, next)")," in your actions (where ",h.default.createElement("code",{__source:{fileName:N,lineNumber:96}},"next(connection, error, fileStream, mime, length)"),").  Note that fileStream is a stream which can be pipe'd to a client.  You can use this in actions if you wish,"),h.default.createElement("p",{__source:{fileName:N,lineNumber:97}},"On .nix operating system's symlinks for both files and folders will be followed."))),this.section("web-clients",h.default.createElement("div",{__source:{fileName:N,lineNumber:102}},h.default.createElement("ul",{__source:{fileName:N,lineNumber:103}},h.default.createElement("li",{__source:{fileName:N,lineNumber:104}},h.default.createElement("code",{__source:{fileName:N,lineNumber:104}},"Cache-Control")," and ",h.default.createElement("code",{__source:{fileName:N,lineNumber:104}},"Expires")," or respectively ",h.default.createElement("code",{__source:{fileName:N,lineNumber:104}},"ETag")," headers (depending on configuration) will be sent with it's caching or revalidation time defined by ",h.default.createElement("code",{__source:{fileName:N,lineNumber:104}},"api.config.servers.web.flatFileCacheDuration")),h.default.createElement("li",{__source:{fileName:N,lineNumber:105}},"Content-Types for files will attempt to be determined using the ",h.default.createElement("a",{href:"https://npmjs.org/package/mime",__source:{fileName:N,lineNumber:105}},"mime package")),h.default.createElement("li",{__source:{fileName:N,lineNumber:106}},"web clients may request ",h.default.createElement("code",{__source:{fileName:N,lineNumber:106}},"connection.params.file")," directly within an action which makes use of ",h.default.createElement("code",{__source:{fileName:N,lineNumber:106}},"api.sendFile"),", or if they are  under the ",h.default.createElement("code",{__source:{fileName:N,lineNumber:106}},"api.config.servers.web.urlPathForFiles")," route, the file will be looked up as if the route matches the directory structure under ",h.default.createElement("code",{__source:{fileName:N,lineNumber:106}},"flatFileDirectory"),"."),h.default.createElement("li",{__source:{fileName:N,lineNumber:107}},"if your action wants to send content down to a client directly, you will do so like this ",h.default.createElement("code",{__source:{fileName:N,lineNumber:107}},"server.sendFile(connection, null, stream, 'text/html', length);"))))),this.section("non-web-clients",h.default.createElement("div",{__source:{fileName:N,lineNumber:113}},h.default.createElement("ul",{__source:{fileName:N,lineNumber:114}},h.default.createElement("li",{__source:{fileName:N,lineNumber:115}},"the param ",h.default.createElement("code",{__source:{fileName:N,lineNumber:115}},"file")," should be used to request a path"),h.default.createElement("li",{__source:{fileName:N,lineNumber:116}},"file data is sent ",h.default.createElement("code",{__source:{fileName:N,lineNumber:116}},"raw"),", and is likely to contain binary content and line breaks.  Parse your responses accordingly!")))),this.section("files-from-actions",h.default.createElement("div",{__source:{fileName:N,lineNumber:122}},h.default.createElement(v.default,{__source:{fileName:N,lineNumber:123}},"// success case\ndata.connection.sendFile('/path/to/file.mp3');\ndata.toRender = false;\nnext();\n\n// failure case\ndata.connection.rawConnection.responseHttpCode = 404;\ndata.connection.sendFile('404.html');\ndata.toRender = false;\nnext();\n"),h.default.createElement("p",{__source:{fileName:N,lineNumber:124}},"You can send files from within actions using ",h.default.createElement("code",{__source:{fileName:N,lineNumber:124}},"connection.sendFile()"),"."),h.default.createElement("p",{__source:{fileName:N,lineNumber:125}},"Note that you can optionally modify responseCodes (for HTTP clients only).  Be sure to set ",h.default.createElement("code",{__source:{fileName:N,lineNumber:125}},"toRender = false")," in the callback, as you have already sent data to the client, and probably don't want to do so again on a file request.  If you try to ",h.default.createElement("code",{__source:{fileName:N,lineNumber:125}},"sendFile")," on a path that doesn't exist (within your public directory), the 404 header will be handled automatically for you."))),this.section("customizing",h.default.createElement("div",{__source:{fileName:N,lineNumber:130}},h.default.createElement(v.default,{__source:{fileName:N,lineNumber:131}},"// in an initializer, override api.staticFile.path\n\napi.staticFile.path = function(connection){\n  if(connection.action == 'sendFile'){\n    return '/tmp/uploads';\n  }else{\n    return api.config.general.paths.public[0];\n  }\n}"),h.default.createElement("p",{__source:{fileName:N,lineNumber:132}},"By default, we want ActionHero's file server to be very locked-down, and only serve files from directories defined in ",h.default.createElement("code",{__source:{fileName:N,lineNumber:132}},"api.config.general.paths.public"),".  This is the safest default for beginners. However, you can customize things by changing the behavior of ",h.default.createElement("code",{__source:{fileName:N,lineNumber:132}},"api.staticFile.path()"),"."),h.default.createElement("p",{__source:{fileName:N,lineNumber:133}},"This would serve files from ",h.default.createElement("code",{__source:{fileName:N,lineNumber:133}},"/public")," for all requests except the ",h.default.createElement("code",{__source:{fileName:N,lineNumber:133}},"sendFile")," action, which will serve files from ",h.default.createElement("code",{__source:{fileName:N,lineNumber:133}},"/tmp")))))))}}]),t}(p.default);t.default=C}},[1213]);
            return { page: comp.default }
          })
        