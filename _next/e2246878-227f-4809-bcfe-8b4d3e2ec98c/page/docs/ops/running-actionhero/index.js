
          window.__NEXT_REGISTER_PAGE('/docs/ops/running-actionhero', function() {
            var comp = module.exports=webpackJsonp([16],{1236:function(e,n,t){e.exports=t(1237)},1237:function(e,n,t){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(n,"__esModule",{value:!0});var l=t(9),a=o(l),r=t(1),i=o(r),s=t(8),c=o(s),u=t(2),d=o(u),m=t(3),f=o(m),p=t(0),h=o(p),g=t(16),w=o(g),E=t(11),k=t(14),y=o(k),v=t(18),b=o(v),T=function(e){function n(e){(0,i.default)(this,n);var t=(0,d.default)(this,(n.__proto__||(0,a.default)(n)).call(this,e));return t.state={titleSection:{title:"Operations: Running ActionHero",icon:"/static/images/ops-tools.svg"},sections:{binary:"The ActionHero Binary",linking:"Linking the ActionHero binary","env-and-config":"Environments and Config","programatic-use":"Programatic Use of ActionHero",signals:"Signals","shutting-down":"Shutting Down","windows-notes":"Windows-Specific Notes"},links:[{link:"/docs/ops/development-mode",title:"Â» Core: Development Mode & REPL"}]},t}return(0,f.default)(n,e),(0,c.default)(n,[{key:"render",value:function(){return h.default.createElement(y.default,{sideNav:this.state.sections,titleSection:this.state.titleSection,links:this.state.links,currentSection:this.state.currentSection},h.default.createElement(E.Row,null,h.default.createElement(E.Col,{md:12},this.section("binary",h.default.createElement("div",null,h.default.createElement(b.default,{language:"bash"},"ActionHero - A multi-transport node.js API Server with integrated cluster capabilities and delayed tasks\n\nBinary options:\n\n* actions list\n* console\n* generate\n* generate action\n* generate cli\n* generate initializer\n* generate server\n* generate task\n* help\n* link\n* start\n* start cluster\n* task enqueue\n* unlink\n* version\n\nDescriptions:\n\n* actions list\n  description: I will list the actions defined on this server\n\n* console\n  description: start an interactive REPL session with the api object in-scope\n\n* generate\n  description: will prepare an empty directory with a template ActionHero project\n\n* generate action\n  description: generate a new action\n  example: actionhero generate action --name=[name] --description=[description]\n  inputs:\n    [name]\n    [description]\n      default: an actionhero action\n\n* generate cli\n  description: generate a new cli command\n  example: actionhero generate cli --name=[name]\n  inputs:\n    [name]\n    [description] (optional)\n      default: an actionhero cli command\n    [example] (optional)\n      default: actionhero command --option=yes\n\n* generate initializer\n  description: generate a new initializer\n  example: actionhero generate initializer --name=[name] --loadPriority=[p] --startPriority=[p] --stopPriority=[p]\n  inputs:\n    [name]\n    [loadPriority]\n      default: 1000\n    [startPriority]\n      default: 1000\n    [stopPriority]\n      default: 1000\n\n* generate server\n  description: generate a new server\n  example: actionhero generate server --name=[name]\n  inputs:\n    [name]\n\n* generate task\n  description: generate a new task\n  example: actionhero generate task --name=[name] --description=[description] --scope=[scope] --frequency=[frequency]\n  inputs:\n    [name]\n    [queue]\n    [description]\n      default: an actionhero task\n    [frequency]\n\n* help\n  description: get actonhero CLI help; will display this document\n\n* link\n  description: link a plugin to this actionhero project\n  example: actionhero link --name=[pluginName] --overwriteConfig=[overwriteConfig]\n  inputs:\n    [name]\n    [overwriteConfig] (optional)\n\n* start\n  description: start this ActionHero server\n  example: actionhero start --config=[/path/to/config] --title=[processTitle] --daemon\n  inputs:\n    [config] (optional)\n      note: path to config.js, defaults to \"process.cwd() + '/' + config.js\". You can also use ENV[ACTIONHERO_CONFIG]\n    [title] (optional)\n      note: process title to use for ActionHeros ID, ps, log, and pidFile defaults. Must be unique for each member of the cluster. You can also use ENV[ACTIONHERO_TITLE]. Process renaming does not work on OSX/Windows\n    [daemon] (optional)\n      note: to fork and run as a new background process defaults to false\n\n* start cluster\n  description: start an actionhero cluster\n  example: actionhero start cluster --workers=[numWorkers] --workerTitlePrefix=[title] --daemon\n  inputs:\n    [workers]\n      note: number of workers (defaults to # CPUs)\n      default: 8\n    [title] (optional)\n      note: worker title prefix (default 'actionhero-worker-') set `--workerTitlePrefix=hostname`, your app.id would be like `your_host_name-#`\n    [workerTitlePrefix]\n      default: actionhero-worker-\n    [daemon] (optional)\n      note: to fork and run as a new background process defaults to false\n    [silent] (optional)\n\n* task enqueue\n  description: enqueue a defined task into your actionhero cluster\n  example: actionhero task enqueue --name=[taskName] --args=[JSON-formatted args]\n  inputs:\n    [name]\n    [args] (optional)\n    [params] (optional)\n\n* unlink\n  description: unlink a plugin from this actionhero project\n  example: actionhero unlink --name=[pluginName]\n  inputs:\n    [name]\n\n* version\n  description: return the ActionHero version within this project\n"),h.default.createElement("p",null,"The suggested method to run your ActionHero server is to use the included ",h.default.createElement("code",null,"./node_modules/.bin/actionhero")," binary.  Note that there is no ",h.default.createElement("code",null,"main.js")," or specific start script your project needs.  ActionHero handles this for you.  Your ActionHero project simply needs to follow the proper directory conventions and it will be bootable."))),this.section("linking",h.default.createElement("div",null,h.default.createElement("ul",null,h.default.createElement("li",null,"If you installed ActionHero globally (",h.default.createElement("code",null,"npm install actionhero -g"),") you should have the ",h.default.createElement("code",null,"actionhero")," binary available to you within your shell at all times."),h.default.createElement("li",null,"Otherwise, you can reference the binary from either ",h.default.createElement("code",null,"./node_modules/.bin/actionhero")," or ",h.default.createElement("code",null,"./node_modules/actionhero/bin/actionhero"),"."),h.default.createElement("li",null,"If you installed ActionHero locally, you can add a reference to your path (OSX and Linux): ",h.default.createElement("code",null,"export PATH=$PATH:node_modules/.bin")," to be able to use simpler commands, IE ",h.default.createElement("code",null,"actionhero start"),". On windows this can be done by running ",h.default.createElement("code",null,"set PATH=%PATH%;%cd%\\node_modules\\.bin")," at command prompt (not powershell).")))),this.section("env-and-config",h.default.createElement("div",null,h.default.createElement("p",null,"By default, ActionHero will use the settings found in the ",h.default.createElement("code",null,"exports.default")," blocks in ",h.default.createElement("code",null,"/config/"),".  However, you can set environment-specfic overrides or changes.  ActionHero inspects ",h.default.createElement("code",null,"process.env.NODE_ENV")," to load up runtime configuration overrides from ",h.default.createElement("code",null,"exports.#{env}")," blocks in your configuration files.  This is the recommended way to have separate settings for staging and production."),h.default.createElement("p",null,"The load order of configs is:"),h.default.createElement("ul",null,h.default.createElement("li",null,"default values in ",h.default.createElement("code",null,"/config")),h.default.createElement("li",null,"environment-specific values in ",h.default.createElement("code",null,"/config")),h.default.createElement("li",null,"options passed in to boot with ",h.default.createElement("code",null,"actionhero.start({configChanges: configChanges}, callback)"))),h.default.createElement(b.default,null,"exports['default'] = {\n  namespace: function (api) {\n    return {\n      enabled: true,\n      safe: false\n    }\n  }\n}\n\nexports.production = {\n  namespace: function (api) {\n    return {\n      safe: true\n    }\n  }\n}"),h.default.createElement("p",null,"In the example above, we are defining ",h.default.createElement("code",null,"api.config.namespace.enabled")," and ",h.default.createElement("code",null,"api.config.namespace.safe"),".  In all environments (NODE_ENV) ",h.default.createElement("code",null,"api.config.namespace.enabled = true")," Only in production would ",h.default.createElement("code",null,"api.config.namespace.safe = true"),", it is ",h.default.createElement("code",null,"false")," everywhere else."))),this.section("programatic-use",h.default.createElement("div",null,h.default.createElement(b.default,null,'var actionheroPrototype = require("actionhero");\nvar actionhero = new actionheroPrototype();\n\nvar timer = 5000;\nactionhero.start(params, function(error, api){\n\n  api.log(" >> Boot Successful!");\n  setTimeout(function(){\n\n    api.log(" >> restarting server...");\n    actionhero.restart(function(error, api){\n\n      api.log(" >> Restarted!");\n      setTimeout(function(){\n\n        api.log(" >> stopping server...");\n        actionhero.stop(function(error, api){\n\n          api.log(" >> Stopped!");\n          process.exit();\n\n        });\n      }, timer);\n    })\n  }, timer);\n});'),h.default.createElement("p",null,"While ",h.default.createElement("strong",null,"NOT")," encouraged, you can always instantiate an ActionHero server yourself.  Perhaps you wish to combine ActionHero with an existing project.  Here is how!  Take note that using these methods will not work for actionCluster, and only a single instance will be started within your project."),h.default.createElement("p",null,"Feel free to look at the source of ",h.default.createElement("code",null,"./node_modules/actionhero/bin/include/start")," to see how the main ActionHero server is implemented for more information."),h.default.createElement("p",null,"You can programmatically control an ActionHero server with ",h.default.createElement("code",null,"actionhero.start(params, callback)"),", ",h.default.createElement("code",null,"actionhero.stop(callback)")," and ",h.default.createElement("code",null,"actionhero.restart(callback)")),h.default.createElement("p",null,"From within ActionHero itself (actions, initilizers, etc), you can use ",h.default.createElement("code",null,"api.commands.start"),", ",h.default.createElement("code",null,"api.commands.stop"),", and ",h.default.createElement("code",null,"api.commands.restart")," to control the server."))),this.section("signals",h.default.createElement("div",null,h.default.createElement(b.default,{language:"bash"},"> ./node_modules/.bin/actionhero start cluster --workers=2\ninfo: actionhero >> start cluster\nnotice:  - STARTING CLUSTER -\nnotice: pid: 41382\ninfo: starting worker #1\ninfo: worker 41383 (#1) has spawned\ninfo: Worker #1 [41383]: starting\ninfo: Worker #1 [41383]: started\ninfo: starting worker #2\ninfo: worker 41384 (#2) has spawned\ninfo: Worker #2 [41384]: starting\ninfo: Worker #2 [41384]: started\n\n# A new terminal\nkill -s TTIN `cat pids/cluster_pidfile`\n\ninfo: worker 41632 (#3) has spawned\ninfo: Worker #3 [41632]: starting\ninfo: Worker #3 [41632]: started\n\n# A new terminal\nkill -s KILL `cat pids/cluster_pidfile`\n\nwarning: Cluster manager quitting\ninfo: Stopping each worker...\ninfo: Worker #1 [41901]: stopping\ninfo: Worker #2 [41904]: stopping\ninfo: Worker #3 [41906]: stopping\ninfo: Worker #3 [41906]: stopped\ninfo: Worker #2 [41904]: stopped\ninfo: Worker #1 [41901]: stopped\nalert: worker 41901 (#1) has exited\nalert: worker 41904 (#2) has exited\nalert: worker 41906 (#3) has exited\ninfo: all workers gone\nnotice: cluster complete, Bye!"),h.default.createElement("p",null,"ActionHero is intended to be run on ",h.default.createElement("code",null,"*nix")," operating systems.  The ",h.default.createElement("code",null,"start")," and ",h.default.createElement("code",null,"start cluster")," commands provide support for signaling. (There is limited support for some of these commands in windows)."),h.default.createElement("p",null,h.default.createElement("strong",null,"actionhero start")),h.default.createElement("ul",null,h.default.createElement("li",null,h.default.createElement("code",null,"kill")," / ",h.default.createElement("code",null,"term")," / ",h.default.createElement("code",null,"int"),' : Process will attempt to "gracefully" shut down.  That is, the worker will close all server connections (possibly sending a shutdown message to clients, depending on server type), stop all task workers, and eventually shut down.  This action may take some time to fully complete.'),h.default.createElement("li",null,h.default.createElement("code",null,"USR2"),': Process will restart itself.  The process will preform the "graceful shutdown" above, and they restart.')),h.default.createElement("p",null,h.default.createElement("strong",null,"actionhero start cluster")),h.default.createElement("p",null,"All signals should be sent to the cluster master process.  You can still signal the termination of a worker, but the cluster manager will start a new one in its place."),h.default.createElement("ul",null,h.default.createElement("li",null,h.default.createElement("code",null,"kill")," / ",h.default.createElement("code",null,"term")," / ",h.default.createElement("code",null,"int"),':  Will signal the master to "gracefully terminate" all workers.  Master will terminate once all workers have completed'),h.default.createElement("li",null,h.default.createElement("code",null,"HUP")," : Restart all workers."),h.default.createElement("li",null,h.default.createElement("code",null,"USR2"),' : "Hot reload".  Worker will kill off existing workers one-by-one, and start a new worker in their place.  This is used for 0-downtime restarts.  Keep in mind that for a short while, your server will be running both old and new code while the workers are rolling.'),h.default.createElement("li",null,h.default.createElement("code",null,"TTOU"),": remove one worker"),h.default.createElement("li",null,h.default.createElement("code",null,"TTIN"),": add one worker")))),this.section("shutting-down",h.default.createElement("div",null,h.default.createElement("p",null,"When using ",h.default.createElement("code",null,"actionhero start")," or ",h.default.createElement("code",null,"actionhero start cluster"),", when you signal ActionHero to stop via the signals above (or from within your running application via ",h.default.createElement("code",null,"api.commands.stop()"),"), actionhero will attempt to gracefully shutdown.  This will include running any initializer's ",h.default.createElement("code",null,"stop()")," method.  This will close any open servers, and attempt to allow any running tasks to complete."),h.default.createElement("p",null,"Because things sometimes go wrong, ",h.default.createElement("code",null,"actionhero start")," and ",h.default.createElement("code",null,"actionhero start cluster"),' also have a "emergency stop" timeout.  This defaults to 30 seconds, and is configurable via the ',h.default.createElement("code",null,"ACTIONHERO_SHUTDOWN_TIMEOUT")," environment variable.  Be sure that your tasks and actions can complete within that window, or else raise that shutdown limit."))),this.section("windows-notes",h.default.createElement("div",null,h.default.createElement("li",null,"Sometimes ActionHero may require a git-based module (rather than a NPM module).  You will need to have git installed.  Depending on how you installed git, it may not be available to the node shell.  Be sure to have also installed references to git.  You can also run node/npm install from the git shell."),h.default.createElement("li",null,"Sometimes, npm will not install the actionhero binary @ ",h.default.createElement("code",null,"/node_modules/.bin/actionhero"),", but rather it will attempt to create a windows executable and wrapper.  You can launch ActionHero directly with ",h.default.createElement("code",null,"./node_modules/actionhero/bin/actionhero")))))))}}]),n}(w.default);n.default=T}},[1236]);
            return { page: comp.default }
          })
        