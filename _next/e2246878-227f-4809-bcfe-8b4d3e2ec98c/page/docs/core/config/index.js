
          window.__NEXT_REGISTER_PAGE('/docs/core/config', function() {
            var comp = module.exports=webpackJsonp([30],{1208:function(e,t,n){e.exports=n(1209)},1209:function(e,t,n){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(9),o=l(a),i=n(1),r=l(i),c=n(8),u=l(c),s=n(2),d=l(s),f=n(3),h=l(f),m=n(0),g=l(m),p=n(16),E=l(p),v=n(11),w=n(14),y=l(w),b=n(18),C=l(b),A=function(e){function t(e){(0,r.default)(this,t);var n=(0,d.default)(this,(t.__proto__||(0,o.default)(t)).call(this,e));return n.state={titleSection:{title:"Core: Config",icon:"/static/images/ops-tools.svg"},sections:{overview:"Overview","config-changes":"Config Changes","boot-options":"Boot Options"},links:[{link:"/docs/core/utils",title:"» Core: Utils"},{link:"/docs/core/localization",title:"« Core: localization"}]},n}return(0,h.default)(t,e),(0,u.default)(t,[{key:"render",value:function(){return g.default.createElement(y.default,{sideNav:this.state.sections,titleSection:this.state.titleSection,links:this.state.links,currentSection:this.state.currentSection},g.default.createElement(v.Row,null,g.default.createElement(v.Col,{md:12},this.section("overview",g.default.createElement("div",null,g.default.createElement("p",null,"There are 2 ways to manage actionHero configuration: config files and overrides.  In both cases, ActionHero starts by reading the config in ",g.default.createElement("code",null,"./config/"),". ",g.default.createElement("a",{href:"https://github.com/actionhero/actionhero/blob/master/config/"},"Here is a documented example"),"."),g.default.createElement("p",null,"The normal way to deal with configuration changes is to use the files in ",g.default.createElement("code",null,"/config/")," and to have special options for each environment.  First we load in all settings from the ",g.default.createElement("code",null,"default")," config block, and then we replace those with anything defined in the relevant ",g.default.createElement("code",null,"environment")," section.  ActionHero uses the standard node environment variable ",g.default.createElement("code",null,"NODE_ENV")," to determine environment, and defaults to ‘development' when one isn't found.  This pattern is very similar the Rails and Sails frameworks.  A good way to visualize this is to note that, by default, the web server will return metadata in response JSON, but we change that in the production NODE_ENV and disable it."),g.default.createElement(C.default,null,"exports.default = {\n  general: function(api){\n    return {\n      //...\n      developmentMode: true\n      //...\n    }\n  }\n}\n\nexports.production = {\n  general: function(api){\n    return {\n      developmentMode: false\n    }\n  }\n}\n"),g.default.createElement("p",null,'The other way to modify the config is to pass a "changes" hash to the server directly at boot.  You can do things like: ',g.default.createElement("code",null,"actionhero.start({configChanges: configChanges}, callback)"),"."),g.default.createElement("p",null,"The priority order of configs is:"),g.default.createElement("ol",null,g.default.createElement("li",null,"options passed in to boot with ",g.default.createElement("code",null,"actionhero.start({configChanges: configChanges}, callback)")),g.default.createElement("li",null,"environment-specific values in ",g.default.createElement("code",null,"/config")),g.default.createElement("li",null,"default values in ",g.default.createElement("code",null,"/config")),g.default.createElement("li",null,"default values of undefined settings from a plugin"),g.default.createElement("li",null,"default values of undefined settings from ActionHero's core")),g.default.createElement("p",null,"When building config files of your own, note that an ",g.default.createElement("code",null,"exports.default")," is always required, and any environment overrides are optional.  What is exported is a hash which eventually resolves a synchronous function which accepts the ",g.default.createElement("code",null,"api")," variable."))),this.section("config-changes",g.default.createElement("div",null,g.default.createElement("p",null,"A configChanges example:"),g.default.createElement(C.default,null,'var actionhero = require("actionhero").actionhero;\n\nvar params = {};\nparams.configChanges = {\n  general: {\n    developmentMode: true\n  }\n}\n\n// start the server!\nactionhero.start(params, function(error, api){\n  api.log("Boot Successful!");\n});'))),this.section("boot-options",g.default.createElement("div",null,g.default.createElement("p",null,"When launching ActionHero you can specify which config directory to use with ",g.default.createElement("code",null,"--config=/path/to/dir")," or the environment variable ",g.default.createElement("code",null,"ACTIONHERO_CONFIG"),", otherwise ",g.default.createElement("code",null,"/config/")," will be used from your working directory."),g.default.createElement("p",null,"The priority of arguments is:"),g.default.createElement("ol",null,g.default.createElement("li",null,"Use the project 'config' folder, if it exists."),g.default.createElement("li",null,g.default.createElement("code",null,"actionhero --config=PATH1 --config=PATH2 --config=PATH3,PATH4")),g.default.createElement("li",null,g.default.createElement("code",null,"ACTIONHERO_CONFIG=PATH1,PATH2 npm start"))),g.default.createElement("p",null,"Note that if ",g.default.createElement("code",null,"--config")," or ",g.default.createElement("code",null,"ACTIONHERO_CONFIG")," are used, they ",g.default.createElement("em",null,"overwrite")," the use of the default ",g.default.createElement("code",null,"/config"),' folder. If you wish to use both, you need to re-specify "config", e.g. ',g.default.createElement("code",null,"--config=config,local-config"),". Also, note that specifying multiple ",g.default.createElement("code",null,"--config")," options on the command line does exactly the same thing as using one parameter with comma separators, however the environment variable method only supports the comma-delimited syntax."))))))}}]),t}(E.default);t.default=A}},[1208]);
            return { page: comp.default }
          })
        