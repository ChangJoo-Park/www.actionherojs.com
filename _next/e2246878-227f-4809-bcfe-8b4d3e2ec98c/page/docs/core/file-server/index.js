
          window.__NEXT_REGISTER_PAGE('/docs/core/file-server', function() {
            var comp = module.exports=webpackJsonp([29],{1210:function(e,t,n){e.exports=n(1211)},1211:function(e,t,n){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(9),i=l(a),o=n(1),r=l(o),c=n(8),s=l(c),u=n(2),d=l(u),f=n(3),m=l(f),h=n(0),p=l(h),E=n(16),g=l(E),y=n(11),w=n(14),v=l(w),b=n(18),C=l(b),T=function(e){function t(e){(0,r.default)(this,t);var n=(0,d.default)(this,(t.__proto__||(0,i.default)(t)).call(this,e));return n.state={titleSection:{title:"Core: File Server",icon:"/static/images/file-server.svg"},sections:{overview:"Overview","web-clients":"Web Clients","non-web-clients":"Non-Web clients","files-from-actions":"Files from Actions",customizing:"Customizing the File Server"},links:[{link:"/docs/core/logging",title:"» Core: Logging"},{link:"/docs/core/chat",title:"« Core: Chat"}]},n}return(0,m.default)(t,e),(0,s.default)(t,[{key:"render",value:function(){return p.default.createElement(v.default,{sideNav:this.state.sections,titleSection:this.state.titleSection,links:this.state.links,currentSection:this.state.currentSection},p.default.createElement(y.Row,null,p.default.createElement(y.Col,{md:12},this.section("overview",p.default.createElement("div",null,p.default.createElement(C.default,{language:"bash"},"> curl localhost:8080/simple.html -v\n\n*   Trying ::1...\n* connect to ::1 port 8080 failed: Connection refused\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n> GET /simple.html HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.43.0\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n< Last-Modified: Fri Jun 12 2015 02:51:29 GMT-0700 (PDT)\n< Cache-Control: max-age=60, must-revalidate, public\n< Expires: Sun, 15 Nov 2015 02:07:46 GMT\n< Content-Type: text/html\n< Access-Control-Allow-Headers: Content-Type\n< Access-Control-Allow-Methods: HEAD, GET, POST, PUT, PATCH, DELETE, OPTIONS, TRACE\n< Access-Control-Allow-Origin: *\n< X-Powered-By: actionhero API\n< Set-Cookie: sessionID=d4453f54ff066a2ef078e5c80f18dc78a81f44ff;path=/;expires=Sun, 15 Nov 2015 03:06:46 GMT;\n< Content-Length: 101\n< Date: Sun, 15 Nov 2015 02:06:46 GMT\n< Connection: keep-alive\n<\n* Connection #0 to host localhost left intact\n\n<h1>ActionHero</h1>\nI am a flat file being served to you via the API from ./public/simple.html<br />\n"),p.default.createElement("p",null,"ActionHero comes with a file server which clients can make use of to request files on the ActionHero server.  ActionHero is not meant to be a 'rendering' server (like express or rails), but can serve static files."),p.default.createElement("p",null,"If a directory is requested rather than a file, ActionHero will look for the file in that directory defined by ",p.default.createElement("code",null,"api.config.commonWeb.directoryFileType")," (which defaults to ",p.default.createElement("code",null,"index.html"),").  Failing to find this file, an error will be returned defined in ",p.default.createElement("code",null,"api.config.general.flatFileIndexPageNotFoundMessage")),p.default.createElement("p",null,"You can use the ",p.default.createElement("code",null,"api.staticFile.get(connection, next)")," in your actions (where ",p.default.createElement("code",null,"next(connection, error, fileStream, mime, length)"),").  Note that fileStream is a stream which can be pipe'd to a client.  You can use this in actions if you wish,"),p.default.createElement("p",null,"On .nix operating system's symlinks for both files and folders will be followed."))),this.section("web-clients",p.default.createElement("div",null,p.default.createElement("ul",null,p.default.createElement("li",null,p.default.createElement("code",null,"Cache-Control")," and ",p.default.createElement("code",null,"Expires")," or respectively ",p.default.createElement("code",null,"ETag")," headers (depending on configuration) will be sent with it's caching or revalidation time defined by ",p.default.createElement("code",null,"api.config.servers.web.flatFileCacheDuration")),p.default.createElement("li",null,"Content-Types for files will attempt to be determined using the ",p.default.createElement("a",{href:"https://npmjs.org/package/mime"},"mime package")),p.default.createElement("li",null,"web clients may request ",p.default.createElement("code",null,"connection.params.file")," directly within an action which makes use of ",p.default.createElement("code",null,"api.sendFile"),", or if they are  under the ",p.default.createElement("code",null,"api.config.servers.web.urlPathForFiles")," route, the file will be looked up as if the route matches the directory structure under ",p.default.createElement("code",null,"flatFileDirectory"),"."),p.default.createElement("li",null,"if your action wants to send content down to a client directly, you will do so like this ",p.default.createElement("code",null,"server.sendFile(connection, null, stream, 'text/html', length);"))))),this.section("non-web-clients",p.default.createElement("div",null,p.default.createElement("ul",null,p.default.createElement("li",null,"the param ",p.default.createElement("code",null,"file")," should be used to request a path"),p.default.createElement("li",null,"file data is sent ",p.default.createElement("code",null,"raw"),", and is likely to contain binary content and line breaks.  Parse your responses accordingly!")))),this.section("files-from-actions",p.default.createElement("div",null,p.default.createElement(C.default,null,"// success case\ndata.connection.sendFile('/path/to/file.mp3');\ndata.toRender = false;\nnext();\n\n// failure case\ndata.connection.rawConnection.responseHttpCode = 404;\ndata.connection.sendFile('404.html');\ndata.toRender = false;\nnext();\n"),p.default.createElement("p",null,"You can send files from within actions using ",p.default.createElement("code",null,"connection.sendFile()"),"."),p.default.createElement("p",null,"Note that you can optionally modify responseCodes (for HTTP clients only).  Be sure to set ",p.default.createElement("code",null,"toRender = false")," in the callback, as you have already sent data to the client, and probably don't want to do so again on a file request.  If you try to ",p.default.createElement("code",null,"sendFile")," on a path that doesn't exist (within your public directory), the 404 header will be handled automatically for you."))),this.section("customizing",p.default.createElement("div",null,p.default.createElement(C.default,null,"// in an initializer, override api.staticFile.path\n\napi.staticFile.path = function(connection){\n  if(connection.action == 'sendFile'){\n    return '/tmp/uploads';\n  }else{\n    return api.config.general.paths.public[0];\n  }\n}"),p.default.createElement("p",null,"By default, we want ActionHero's file server to be very locked-down, and only serve files from directories defined in ",p.default.createElement("code",null,"api.config.general.paths.public"),".  This is the safest default for beginners. However, you can customize things by changing the behavior of ",p.default.createElement("code",null,"api.staticFile.path()"),"."),p.default.createElement("p",null,"This would serve files from ",p.default.createElement("code",null,"/public")," for all requests except the ",p.default.createElement("code",null,"sendFile")," action, which will serve files from ",p.default.createElement("code",null,"/tmp")))))))}}]),t}(g.default);t.default=T}},[1210]);
            return { page: comp.default }
          })
        