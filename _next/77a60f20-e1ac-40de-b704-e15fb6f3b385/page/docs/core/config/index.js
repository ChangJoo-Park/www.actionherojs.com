
          window.__NEXT_REGISTER_PAGE('/docs/core/config', function() {
            var comp = module.exports=webpackJsonp([30],{1211:function(e,t,n){e.exports=n(1212)},1212:function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(9),o=i(a),l=n(1),r=i(l),c=n(8),u=i(c),s=n(2),f=i(s),m=n(3),d=i(m),N="/home/ubuntu/www.actionherojs.com/pages/docs/core/config.js?entry",_=n(0),h=i(_),b=n(16),g=i(b),p=n(11),E=n(14),v=i(E),w=n(18),y=i(w),C=function(e){function t(e){(0,r.default)(this,t);var n=(0,f.default)(this,(t.__proto__||(0,o.default)(t)).call(this,e));return n.state={titleSection:{title:"Core: Config",icon:"/static/images/ops-tools.svg"},sections:{overview:"Overview","config-changes":"Config Changes","boot-options":"Boot Options"},links:[{link:"/docs/core/utils",title:"» Core: Utils"},{link:"/docs/core/localization",title:"« Core: localization"}]},n}return(0,d.default)(t,e),(0,u.default)(t,[{key:"render",value:function(){return h.default.createElement(v.default,{sideNav:this.state.sections,titleSection:this.state.titleSection,links:this.state.links,currentSection:this.state.currentSection,__source:{fileName:N,lineNumber:65}},h.default.createElement(p.Row,{__source:{fileName:N,lineNumber:66}},h.default.createElement(p.Col,{md:12,__source:{fileName:N,lineNumber:67}},this.section("overview",h.default.createElement("div",{__source:{fileName:N,lineNumber:69}},h.default.createElement("p",{__source:{fileName:N,lineNumber:70}},"There are 2 ways to manage actionHero configuration: config files and overrides.  In both cases, ActionHero starts by reading the config in ",h.default.createElement("code",{__source:{fileName:N,lineNumber:70}},"./config/"),". ",h.default.createElement("a",{href:"https://github.com/actionhero/actionhero/blob/master/config/",__source:{fileName:N,lineNumber:70}},"Here is a documented example"),"."),h.default.createElement("p",{__source:{fileName:N,lineNumber:71}},"The normal way to deal with configuration changes is to use the files in ",h.default.createElement("code",{__source:{fileName:N,lineNumber:71}},"/config/")," and to have special options for each environment.  First we load in all settings from the ",h.default.createElement("code",{__source:{fileName:N,lineNumber:71}},"default")," config block, and then we replace those with anything defined in the relevant ",h.default.createElement("code",{__source:{fileName:N,lineNumber:71}},"environment")," section.  ActionHero uses the standard node environment variable ",h.default.createElement("code",{__source:{fileName:N,lineNumber:71}},"NODE_ENV")," to determine environment, and defaults to ‘development' when one isn't found.  This pattern is very similar the Rails and Sails frameworks.  A good way to visualize this is to note that, by default, the web server will return metadata in response JSON, but we change that in the production NODE_ENV and disable it."),h.default.createElement(y.default,{__source:{fileName:N,lineNumber:72}},"exports.default = {\n  general: function(api){\n    return {\n      //...\n      developmentMode: true\n      //...\n    }\n  }\n}\n\nexports.production = {\n  general: function(api){\n    return {\n      developmentMode: false\n    }\n  }\n}\n"),h.default.createElement("p",{__source:{fileName:N,lineNumber:74}},'The other way to modify the config is to pass a "changes" hash to the server directly at boot.  You can do things like: ',h.default.createElement("code",{__source:{fileName:N,lineNumber:74}},"actionhero.start({configChanges: configChanges}, callback)"),"."),h.default.createElement("p",{__source:{fileName:N,lineNumber:75}},"The priority order of configs is:"),h.default.createElement("ol",{__source:{fileName:N,lineNumber:77}},h.default.createElement("li",{__source:{fileName:N,lineNumber:78}},"options passed in to boot with ",h.default.createElement("code",{__source:{fileName:N,lineNumber:78}},"actionhero.start({configChanges: configChanges}, callback)")),h.default.createElement("li",{__source:{fileName:N,lineNumber:79}},"environment-specific values in ",h.default.createElement("code",{__source:{fileName:N,lineNumber:79}},"/config")),h.default.createElement("li",{__source:{fileName:N,lineNumber:80}},"default values in ",h.default.createElement("code",{__source:{fileName:N,lineNumber:80}},"/config")),h.default.createElement("li",{__source:{fileName:N,lineNumber:81}},"default values of undefined settings from a plugin"),h.default.createElement("li",{__source:{fileName:N,lineNumber:82}},"default values of undefined settings from ActionHero's core")),h.default.createElement("p",{__source:{fileName:N,lineNumber:85}},"When building config files of your own, note that an ",h.default.createElement("code",{__source:{fileName:N,lineNumber:85}},"exports.default")," is always required, and any environment overrides are optional.  What is exported is a hash which eventually resolves a synchronous function which accepts the ",h.default.createElement("code",{__source:{fileName:N,lineNumber:85}},"api")," variable."))),this.section("config-changes",h.default.createElement("div",{__source:{fileName:N,lineNumber:90}},h.default.createElement("p",{__source:{fileName:N,lineNumber:91}},"A configChanges example:"),h.default.createElement(y.default,{__source:{fileName:N,lineNumber:92}},'var actionhero = require("actionhero").actionhero;\n\nvar params = {};\nparams.configChanges = {\n  general: {\n    developmentMode: true\n  }\n}\n\n// start the server!\nactionhero.start(params, function(error, api){\n  api.log("Boot Successful!");\n});'))),this.section("boot-options",h.default.createElement("div",{__source:{fileName:N,lineNumber:97}},h.default.createElement("p",{__source:{fileName:N,lineNumber:98}},"When launching ActionHero you can specify which config directory to use with ",h.default.createElement("code",{__source:{fileName:N,lineNumber:98}},"--config=/path/to/dir")," or the environment variable ",h.default.createElement("code",{__source:{fileName:N,lineNumber:98}},"ACTIONHERO_CONFIG"),", otherwise ",h.default.createElement("code",{__source:{fileName:N,lineNumber:98}},"/config/")," will be used from your working directory."),h.default.createElement("p",{__source:{fileName:N,lineNumber:99}},"The priority of arguments is:"),h.default.createElement("ol",{__source:{fileName:N,lineNumber:101}},h.default.createElement("li",{__source:{fileName:N,lineNumber:102}},"Use the project 'config' folder, if it exists."),h.default.createElement("li",{__source:{fileName:N,lineNumber:103}},h.default.createElement("code",{__source:{fileName:N,lineNumber:103}},"actionhero --config=PATH1 --config=PATH2 --config=PATH3,PATH4")),h.default.createElement("li",{__source:{fileName:N,lineNumber:104}},h.default.createElement("code",{__source:{fileName:N,lineNumber:104}},"ACTIONHERO_CONFIG=PATH1,PATH2 npm start"))),h.default.createElement("p",{__source:{fileName:N,lineNumber:107}},"Note that if ",h.default.createElement("code",{__source:{fileName:N,lineNumber:107}},"--config")," or ",h.default.createElement("code",{__source:{fileName:N,lineNumber:107}},"ACTIONHERO_CONFIG")," are used, they ",h.default.createElement("em",{__source:{fileName:N,lineNumber:107}},"overwrite")," the use of the default ",h.default.createElement("code",{__source:{fileName:N,lineNumber:107}},"/config"),' folder. If you wish to use both, you need to re-specify "config", e.g. ',h.default.createElement("code",{__source:{fileName:N,lineNumber:107}},"--config=config,local-config"),". Also, note that specifying multiple ",h.default.createElement("code",{__source:{fileName:N,lineNumber:107}},"--config")," options on the command line does exactly the same thing as using one parameter with comma separators, however the environment variable method only supports the comma-delimited syntax."))))))}}]),t}(g.default);t.default=C}},[1211]);
            return { page: comp.default }
          })
        