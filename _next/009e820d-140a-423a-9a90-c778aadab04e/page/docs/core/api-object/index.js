
          window.__NEXT_REGISTER_PAGE('/docs/core/api-object', function() {
            var comp = module.exports=webpackJsonp([34],{1200:function(n,e,t){n.exports=t(1201)},1201:function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{default:n}}Object.defineProperty(e,"__esModule",{value:!0});var i=t(9),c=o(i),a=t(1),s=o(a),r=t(8),u=o(r),l=t(2),d=o(l),F=t(3),m=o(F),p=t(0),b=o(p),h=t(16),f=o(h),k=t(11),g=t(14),A=o(g),v=t(18),E=o(v),C=function(n){function e(n){(0,s.default)(this,e);var t=(0,d.default)(this,(e.__proto__||(0,c.default)(e)).call(this,n));return t.state={titleSection:{title:"Core: API Object",icon:"/static/images/routing.svg"},sections:{overview:"Overview"},links:[{link:"/docs/core/utils",title:"Â« Core: Utils"}]},t}return(0,m.default)(e,n),(0,u.default)(e,[{key:"render",value:function(){return b.default.createElement(A.default,{sideNav:this.state.sections,titleSection:this.state.titleSection,links:this.state.links,currentSection:this.state.currentSection},b.default.createElement(k.Row,null,b.default.createElement(k.Col,{md:12},this.section("overview",b.default.createElement("div",null,b.default.createElement("p",null,"By now you will have noticed that most sections of ActionHero are initialized with access to the ",b.default.createElement("code",null,"api")," object.  The ",b.default.createElement("code",null,"api")," object is the top-level container/namespace for all of ActionHero's data and methods.  We use the ",b.default.createElement("code",null,"api")," object to avoid polluting any global namespaces.  The api object is available to all parts of ActionHero to share data and state.  Feel free to modify or add too the api object as you see fit, but be mindful of the data it already contains."),b.default.createElement("p",null,"Collections that you are recommended to leave unmodified are un-expanded ",b.default.createElement("code",null,"[Object]"),"s and/or commented out."),b.default.createElement(E.default,null,"var api = {\n    // STATE VARIABLES //\n    running: true,\n    initialized: true,\n    shuttingDown: false,\n\n    // METADATA //\n    bootTime: 1421016104943,\n    env: 'development',\n    id: '10.0.1.5',\n    actionheroVersion: '10.0.0',\n    projectRoot: '/app/actionhero',\n    _startingParams: { configChanges: { general: [] } },\n\n    // DEVELOPER MODE //\n    watchedFiles: [],\n    watchFileAndAct: [Function],\n    unWatchAllFiles: [Function],\n    loadConfigDirectory: [Function],\n\n    // SERVER COMMAND AND CONTROL //\n    commands:{\n      initialize: [Function],\n      start:      [Function],\n      stop:       [Function],\n      restart:    [Function]\n    },\n\n    // COMAND AND CONTROL //\n    _self:{\n      initializers: {},\n      startingParams: { configChanges: [] },\n\n       // arrays containing init/stop/start methods\n       configInitializers: [],\n       loadInitializers:   [],\n       startInitializers:  [],\n       stopInitializers:   []\n     },\n\n    // INITIALZER DEFAULTS //\n    initializerDefaults:{\n      load:  1000,\n      start: 1000,\n      stop:  1000\n    },\n\n    // UTILS //\n    utils:{\n      hashMerge:              [Function],\n      isPlainObject:          [Function],\n      arrayUniqueify:         [Function],\n      objClone:               [Function],\n      collapseObjectToArray:  [Function],\n      getExternalIPAddress:   [Function],\n      parseCookies:           [Function],\n      parseIPv6URI:           [Function]\n    },\n\n    // CONFIG //\n    config:\n     { general:\n        { apiVersion: '0.0.1',\n          serverName: 'actionhero API',\n          serverToken: 'change-me',\n          welcomeMessage: 'Hello! Welcome to the actionhero api',\n          cachePrefix: 'actionhero:cache:',\n          lockPrefix: 'actionhero:lock:',\n          lockDuration: 10000,\n          developmentMode: false,\n          simultaneousActions: 5,\n          disableParamScrubbing: false,\n          filteredParams: [],\n          missingParamChecks: [Object],\n          directoryFileType: 'index.html',\n          defaultMiddlewarePriority: 100,\n          paths: [Object],\n          startingChatRooms: [Object],\n          plugins: [] },\n       errors:\n        { _toExpand: false,\n          missingParams: [Function],\n          unknownAction: [Function],\n          unsupportedServerType: [Function],\n          serverShuttingDown: [Function],\n          tooManyPendingActions: [Function],\n          fileNotFound: [Function],\n          fileNotProvided: [Function],\n          fileReadError: [Function],\n          verbNotFound: [Function],\n          verbNotAllowed: [Function],\n          connectionRoomAndMessage: [Function],\n          connectionNotInRoom: [Function],\n          connectionAlreadyInRoom: [Function],\n          connectionRoomHasBeenDeleted: [Function],\n          connectionRoomNotExist: [Function],\n          connectionRoomExists: [Function],\n          connectionRoomRequired: [Function] },\n       logger: { transports: [Object] },\n       redis:\n        { channel: 'actionhero',\n          rpcTimeout: 5000,\n          pkg: 'fakeredis' },\n       routes: {},\n       servers:\n        { socket: [Object],\n          web: [Object],\n          websocket: [Object] },\n       stats: { writeFrequency: 1000, keys: [Object] },\n       tasks:\n        { scheduler: false,\n          queues: [],\n          timeout: 5000,\n          minTaskProcessors: 0,\n          maxTaskProcessors: 0,\n          checkTimeout: 500,\n          maxEventLoopDelay: 5,\n          toDisconnectProcessors: true,\n          redis: [Object] } },\n\n    // PIDS //\n    pids:\n     { pid: 26168,\n       path: '/app/actionhero/pids',\n       sanitizeId: [Function],\n       title: 'actionhero-10.0.1.5',\n       writePidFile: [Function],\n       clearPidFile: [Function] },\n\n    // LOGGER //\n    logger: {},\n    log: [Function],\n\n    // EXCEPTION HANDLERS //\n    exceptionHandlers:{\n      reporters: [ [Function] ],\n      report: [Function],\n      loader: [Function],\n      action: [Function],\n      task: [Function]\n    },\n\n    // REDIS //\n    redis:{\n      clusterCallbaks: {},\n      clusterCallbakTimeouts: {},\n      subscriptionHandlers:{\n        do: [Function],\n        doResponse: [Function],\n        chat: [Function]\n      },\n      status:{\n        client: true,\n        subscriber: true,\n        subscribed: true,\n        calledback: true\n      },\n      initialize: [Function],\n      subscribe: [Function],\n      publish: [Function],\n      doCluster: [Function],\n      respondCluster: [Function],\n      client: { },\n      subscriber: { },\n\n    // CACHE //\n    cache:{\n      redisPrefix: 'actionhero:cache:',\n      lockPrefix: 'actionhero:lock:',\n      lockDuration: 10000,\n      lockName: '10.0.1.5',\n      lockRetry: 100,\n      keys: [Function],\n      locks: [Function],\n      size: [Function],\n      clear: [Function],\n      dumpWrite: [Function],\n      dumpRead: [Function],\n      saveDumpedElement: [Function],\n      load: [Function],\n      destroy: [Function],\n      save: [Function],\n      lock: [Function],\n      unlock: [Function],\n      checkLock: [Function]\n    },\n\n    // STATS //\n    stats:{\n      // timer: null,\n      // pendingIncrements: {},\n      increment: [Function],\n      // writeIncrements: [Function],\n      get: [Function],\n      getAll: [Function]\n    },\n\n    // CONNECTIONS //\n    connections:{\n      createCallbacks: {},\n      destroyCallbacks: {},\n      allowedVerbs:[\n        'quit',\n        'exit',\n        'documentation',\n        'paramAdd',\n        'paramDelete',\n        'paramView',\n        'paramsView',\n        'paramsDelete',\n        'roomAdd',\n        'roomLeave',\n        'roomView',\n        'detailsView',\n        'say'\n        ],\n       connections: {},\n       // apply: [Function],\n       // applyCatch: [Function],\n       addCreateCallback: [Function],\n       addDestroyCallback: [Function]\n    },\n    connection: [Function], // prototype\n\n    // ACTIONS //\n    actions:{\n      actions: {},\n      preProcessors: {},\n      postProcessors: {},\n      addPreProcessor: [Function],\n      addPostProcessor: [Function],\n      // validateAction: [Function],\n      // loadFile: [Function]\n    },\n    ActionProcessor: [Function], // prototype\n\n    // PARAMS //\n    params:{\n      globalSafeParams: [\n        'file',\n        'apiVersion',\n        'callback',\n        'action'\n      ],\n      // buildPostVariables: [Function],\n      postVariables: []\n     },\n\n    // SERVERS //\n    GenericServer: {}, // prototype\n    servers: {\n      servers: []\n    },\n\n    // ROUTES //\n    routes: {\n      routes: {\n        get: [Object],\n        post: [Object],\n        put: [Object],\n        patch: [Object],\n        delete: [Object]\n      },\n       // verbs: [],\n       // processRoute: [Function],\n       // matchURL: [Function],\n       // loadRoutes: [Function],\n     },\n\n    // STATIC FILES //\n    staticFile:{\n      // path: [Function],\n      // get: [Function],\n      sendFile: [Function],\n      // sendFileNotFound: [Function],\n      // checkExistence: [Function],\n      // logRequest: [Function]\n    },\n\n    // CHAT //\n    chatRoom:{\n      keys: {\n        rooms: 'actionhero:chatRoom:rooms',\n        members: 'actionhero:chatRoom:members:'\n      },\n      messageChannel: '/actionhero/chat/chat',\n      joinCallbacks: {},\n      leaveCallbacks: {},\n      sayCallbacks: {},\n      addJoinCallback: [Function],\n      addLeaveCallback: [Function],\n      addSayCallback: [Function],\n      broadcast: [Function],\n      generateMessagePayload: [Function],\n      incomingMessage: [Function],\n      add: [Function],\n      destroy: [Function],\n      exists: [Function],\n      sanitizeMemberDetails: [Function],\n      roomStatus: [Function],\n      generateMemberDetails: [Function],\n      addMember: [Function],\n      removeMember: [Function],\n      // handleCallbacks: [Function],\n    },\n\n    // RESQUE //\n    resque: {\n      queue: {},\n      multiWorker: {},\n      scheduler: null,\n      // connectionDetails: {},\n      // startQueue: [Function],\n      // startScheduler: [Function],\n      // stopScheduler: [Function],\n      // startMultiWorker: [Function],\n      // stopMultiWorker: [Function],\n    },\n\n    // TASKS //\n    tasks:{\n      tasks: {},\n      jobs:  {},\n      // loadFile: [Function],\n      // jobWrapper: [Function],\n      // validateTask: [Function],\n      enqueue: [Function],\n      enqueueAt: [Function],\n      enqueueIn: [Function],\n      del: [Function],\n      delDelayed: [Function],\n      scheduledAt: [Function],\n      timestamps: [Function],\n      delayedAt: [Function],\n      allDelayed: [Function],\n      // enqueueRecurrentJob: [Function],\n      // enqueueAllRecurrentJobs: [Function],\n      stopRecurrentJob: [Function],\n      details: [Function] },\n\n    // DOCUMENTATION //\n    documentation: {}\n\n  };\n"))))))}}]),e}(f.default);e.default=C}},[1200]);
            return { page: comp.default }
          })
        